#!/usr/bin/env python3
"""
Python WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
–≠—Ç–æ—Ç –∫–ª–∏–µ–Ω—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python websocket_client.py --api-key YOUR_API_KEY --host localhost:8000
    
–ò–ª–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å session auth:
    python websocket_client.py --host localhost:8000 --session-id YOUR_SESSION_ID
"""

import asyncio
import websockets
import json
import argparse
import logging
import signal
import sys
from datetime import datetime
from typing import Optional

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class NotificationWebSocketClient:
    """WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∞–Ω–æ–º–∞–ª–∏—è—Ö"""
    
    def __init__(self, host: str, api_key: Optional[str] = None, 
                 session_id: Optional[str] = None, ssl: bool = False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        
        Args:
            host: —Ö–æ—Å—Ç –∏ –ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: localhost:8000)
            api_key: API –∫–ª—é—á –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
            session_id: Session ID –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ API –∫–ª—é—á—É)
            ssl: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ SSL (wss://)
        """
        self.host = host
        self.api_key = api_key
        self.session_id = session_id
        self.ssl = ssl
        self.websocket = None
        self.running = False
        self.reconnect_delay = 5  # 5 —Å–µ–∫—É–Ω–¥
        self.max_reconnect_delay = 60
        self.ping_interval = 30  # 30 —Å–µ–∫—É–Ω–¥
        
        self.notifications_received = 0
        self.connection_attempts = 0
        self.last_ping_time = None
    
    def get_websocket_url(self) -> str:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç URL –¥–ª—è WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        protocol = "wss" if self.ssl else "ws"
        url = f"{protocol}://{self.host}/ws/notifications/"
        
        if self.api_key:
            url += f"?api_key={self.api_key}"
        
        return url
    
    async def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket —Å–µ—Ä–≤–µ—Ä—É"""
        url = self.get_websocket_url()
        logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {url}...")
        
        try:
            connect_kwargs = {
                'ping_interval': 20,
                'ping_timeout': 10
            }
            
            if self.session_id and sys.platform != 'win32':
                connect_kwargs['extra_headers'] = {'Cookie': f'sessionid={self.session_id}'}
            
            self.websocket = await websockets.connect(url, **connect_kwargs)
            self.connection_attempts += 1
            logger.info(f"‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–æ! (–ø–æ–ø—ã—Ç–∫–∞ #{self.connection_attempts})")
            return True
        except Exception as e:
            logger.error(f"‚úó –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    async def send_ping(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ ping —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self.websocket:
            try:
                await self.websocket.send(json.dumps({
                    'type': 'ping',
                    'timestamp': datetime.now().isoformat()
                }))
                self.last_ping_time = datetime.now()
                logger.debug("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω ping")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ping: {e}")
    
    async def mark_as_read(self, notification_id: str):
        """–û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ"""
        if self.websocket:
            try:
                await self.websocket.send(json.dumps({
                    'type': 'mark_as_read',
                    'notification_id': notification_id
                }))
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–º–µ—Ç–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notification_id} –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def request_pending_notifications(self):
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if self.websocket:
            try:
                await self.websocket.send(json.dumps({
                    'type': 'request_pending'
                }))
                logger.info("–ó–∞–ø—Ä–æ—à–µ–Ω—ã –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
    
    async def handle_message(self, message: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            data = json.loads(message)
            msg_type = data.get('type')
            
            if msg_type == 'connection_established':
                logger.info("‚ïê" * 60)
                logger.info(f"üîó –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
                logger.info(f"   User ID: {data.get('user_id')}")
                logger.info(f"   Timestamp: {data.get('timestamp')}")
                logger.info("‚ïê" * 60)
                
                await self.request_pending_notifications()
            
            elif msg_type == 'pong':
                logger.debug(f"–ü–æ–ª—É—á–µ–Ω pong: {data.get('timestamp')}")
            
            elif msg_type == 'notification':
                self.notifications_received += 1
                notification = data.get('notification', {})
                
                logger.info("‚ïî" + "‚ïê" * 58 + "‚ïó")
                logger.info(f"‚ïë üö® –ù–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï #{self.notifications_received}")
                logger.info("‚ï†" + "‚ïê" * 58 + "‚ï£")
                logger.info(f"‚ïë ID: {notification.get('id')}")
                logger.info(f"‚ïë –ó–∞–≥–æ–ª–æ–≤–æ–∫: {notification.get('title')}")
                logger.info(f"‚ïë –°–æ–æ–±—â–µ–Ω–∏–µ: {notification.get('message')}")
                logger.info(f"‚ïë –£—Ä–æ–≤–µ–Ω—å: {notification.get('severity')}")
                logger.info(f"‚ïë –¢–∏–ø: {notification.get('anomaly_type')}")
                logger.info(f"‚ïë –ü–æ–ª–∏–≥–æ–Ω: {notification.get('polygon_name')}")
                logger.info(f"‚ïë –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {notification.get('device_id')}")
                logger.info(f"‚ïë –í—Ä–µ–º—è: {notification.get('created_at')}")
                logger.info("‚ïö" + "‚ïê" * 58 + "‚ïù")
                
                asyncio.create_task(self._auto_mark_read(notification.get('id')))
            
            elif msg_type == 'pending_notifications':
                notifications = data.get('notifications', [])
                count = data.get('count', 0)
                
                logger.info("‚ïê" * 60)
                logger.info(f"üì¨ –ü–æ–ª—É—á–µ–Ω–æ {count} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                logger.info("‚ïê" * 60)
                
                for i, notif in enumerate(notifications, 1):
                    logger.info(f"\n[{i}/{count}] {notif.get('title')}")
                    logger.info(f"  ‚îî‚îÄ {notif.get('message')}")
                    logger.info(f"  ‚îî‚îÄ –£—Ä–æ–≤–µ–Ω—å: {notif.get('severity')} | –ü–æ–ª–∏–≥–æ–Ω: {notif.get('polygon_name')}")
                    logger.info(f"  ‚îî‚îÄ ID: {notif.get('id')}")
                
                if count == 0:
                    logger.info("‚úì –ù–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                
                logger.info("‚ïê" * 60)
            
            elif msg_type == 'notification_marked':
                notification_id = data.get('notification_id')
                success = data.get('success')
                if success:
                    logger.info(f"‚úì –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ")
                else:
                    logger.warning(f"‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id}")
            
            elif msg_type == 'error':
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {data.get('message')}")
            
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {msg_type}")
                logger.debug(f"–î–∞–Ω–Ω—ã–µ: {data}")
        
        except json.JSONDecodeError:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {message}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _auto_mark_read(self, notification_id: str, delay: int = 2):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ —á–µ—Ä–µ–∑ delay —Å–µ–∫—É–Ω–¥"""
        await asyncio.sleep(delay)
        await self.mark_as_read(notification_id)
    
    async def ping_loop(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ ping –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        while self.running:
            await asyncio.sleep(self.ping_interval)
            if self.running:
                await self.send_ping()
    
    async def listen(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
        while self.running:
            try:
                if not self.websocket:
                    connected = await self.connect()
                    if not connected:
                        logger.warning(f"–ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {self.reconnect_delay} —Å–µ–∫—É–Ω–¥...")
                        await asyncio.sleep(self.reconnect_delay)
                        self.reconnect_delay = min(
                            self.reconnect_delay * 1.5,
                            self.max_reconnect_delay
                        )
                        continue
                    
                    self.reconnect_delay = 5
                
                async for message in self.websocket:
                    await self.handle_message(message)
            
            except websockets.exceptions.ConnectionClosed:
                logger.warning("‚ö† –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ —Å–µ—Ä–≤–µ—Ä–æ–º")
                self.websocket = None
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è: {e}")
                await asyncio.sleep(5)
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞"""
        self.running = True
        
        logger.info("‚ïî" + "‚ïê" * 58 + "‚ïó")
        logger.info("‚ïë  WebSocket Client –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π SantiWay      ‚ïë")
        logger.info("‚ïö" + "‚ïê" * 58 + "‚ïù")
        logger.info("")
        
        try:
            await asyncio.gather(
                self.listen(),
                self.ping_loop()
            )
        except asyncio.CancelledError:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞...")
        finally:
            await self.stop()
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        self.running = False
        if self.websocket:
            try:
                await self.websocket.close()
            except:
                pass
        
        logger.info("")
        logger.info("‚ïê" * 60)
        logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        logger.info(f"  ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {self.notifications_received}")
        logger.info(f"  ‚Ä¢ –ü–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {self.connection_attempts}")
        logger.info("‚ïê" * 60)
        logger.info("–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description='WebSocket –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π SantiWay'
    )
    parser.add_argument(
        '--host',
        default='localhost:8000',
        help='–•–æ—Å—Ç –∏ –ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: localhost:8000)'
    )
    parser.add_argument(
        '--api-key',
        help='API –∫–ª—é—á –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'
    )
    parser.add_argument(
        '--session-id',
        help='Session ID –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ API –∫–ª—é—á—É)'
    )
    parser.add_argument(
        '--ssl',
        action='store_true',
        help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SSL (wss://)'
    )
    parser.add_argument(
        '--debug',
        action='store_true',
        help='–í–∫–ª—é—á–∏—Ç—å debug –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ'
    )
    
    args = parser.parse_args()
    
    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)
    
    if not args.api_key and not args.session_id:
        logger.error("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å --api-key –∏–ª–∏ --session-id –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        sys.exit(1)
    
    client = NotificationWebSocketClient(
        host=args.host,
        api_key=args.api_key,
        session_id=args.session_id,
        ssl=args.ssl
    )
    
    if sys.platform != 'win32':
        loop = asyncio.get_event_loop()
        
        def signal_handler():
            logger.info("\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            asyncio.create_task(client.stop())
        
        for sig in (signal.SIGINT, signal.SIGTERM):
            loop.add_signal_handler(sig, signal_handler)
    
    try:
        await client.run()
    except KeyboardInterrupt:
        logger.info("\n–ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        await client.stop()


if __name__ == '__main__':
    if sys.platform == 'win32':
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass

