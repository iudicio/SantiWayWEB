apiVersion: apps/v1
kind: Deployment
metadata:
  name: eswriter
  namespace: {{ .Values.namespace }}
  labels:
    app: eswriter
spec:
  replicas: {{ default 1 .Values.eswriter.replicas }}
  selector:
    matchLabels:
      app: eswriter
  template:
    metadata:
      labels:
        app: eswriter
      {{- with .Values.eswriter.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
      {{- if .Values.eswriter.serviceAccountName }}
      serviceAccountName: {{ .Values.eswriter.serviceAccountName }}
      {{- end }}

      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      containers:
        - name: eswriter
          image: "{{ .Values.images.eswriter.repository }}:{{ .Values.images.eswriter.tag }}"
          imagePullPolicy: {{ default "IfNotPresent" .Values.images.eswriter.pullPolicy }}

          command: ["sh","-c"]
          args:
            - >
              export CELERY_BROKER_URL="amqp://${RABBITMQ_USER}:${RABBITMQ_PASS}@{{ include "santiway.fullname" . }}-rabbit.{{ .Release.Namespace }}.svc:{{ .Values.rabbitmq.service.amqpPort }}/";
              celery -A celery_app worker
              -Q "$CELERY_C_QUEUE_NAME"
              -n "$CELERY_CONSUMER_NAME"
              -c 1
              -l "$CELERY_LOG_LEVEL"

          # У воркера обычно нет входящих портов. Оставлено на случай метрик:
          {{- with .Values.eswriter.ports }}
          ports:
            {{- toYaml . | nindent 12 }}
          {{- end }}

          # Обязательные/общие переменные окружения
          envFrom:
            - configMapRef:
                name: {{ include "santiway.fullname" . }}-eswriter-env
            # Secret подключаем только если он реально есть и непустой
            {{- if and (hasKey .Values.eswriter "secrets") (gt (len .Values.eswriter.secrets) 0) }}
            - secretRef:
                name: {{ include "santiway.fullname" . }}-eswriter-secret
            {{- end }}

          # broker собираем из секрета rabbitmq (не зависим от .env)
          env:
            - name: RABBITMQ_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "santiway.fullname" . }}-rabbit
                  key: username
            - name: RABBITMQ_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ include "santiway.fullname" . }}-rabbit
                  key: password


          {{- $probes := .Values.eswriter.probes | default dict }}
          {{- if and $probes ($probes.enabled | default false) }}
          {{- with $probes.liveness }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with $probes.readiness }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- end }}

          resources:
            {{- toYaml ( .Values.eswriter.resources | default dict ) | nindent 12 }}

          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh","-c","sleep 5"]

      terminationGracePeriodSeconds: {{ default 30 .Values.eswriter.terminationGracePeriodSeconds }}

      {{- with .Values.eswriter.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- with .Values.eswriter.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}

      {{- with .Values.eswriter.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
